// ===============================================
// REQUÊTES LINQ POUR LE SYSTÈME NEXAWORK
// ===============================================
// Ces requêtes sont prêtes à être copiées-collées dans votre projet
// Assurez-vous d'avoir ajouté : using Microsoft.EntityFrameworkCore;

// ===============================================
// 1. OBTENIR TOUS LES PROBLÈMES EN COURS (TOUS LES PRODUITS)
// ===============================================
var problemesEnCours = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.Statut.State == "En cours")
    .ToListAsync();

// ===============================================
// 2. OBTENIR TOUS LES PROBLÈMES EN COURS POUR UN PRODUIT (TOUTES LES VERSIONS)
// ===============================================
// Exemple avec "Planificateur d'Entraînement"
var problemesEnCoursProduit = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.Statut.State == "En cours" && t.Product.ProductName == "Planificateur d'Entraînement")
    .ToListAsync();

// Ou par ProductId
var problemesEnCoursParProductId = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.Statut.State == "En cours" && t.ProductId == 3)
    .ToListAsync();

// ===============================================
// 3. OBTENIR TOUS LES PROBLÈMES EN COURS POUR UN PRODUIT (UNE SEULE VERSION)
// ===============================================
// Exemple avec "Planificateur d'Entraînement" version "2.0"
var problemesEnCoursProduitVersion = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.Statut.State == "En cours" 
             && t.Product.ProductName == "Planificateur d'Entraînement"
             && t.Version.VersionName == "2.0")
    .ToListAsync();

// Ou par Ids
var problemesEnCoursParIds = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.Statut.State == "En cours" && t.ProductId == 3 && t.VersionId == 5)
    .ToListAsync();

// ===============================================
// 4. OBTENIR TOUS LES PROBLÈMES RENCONTRÉS AU COURS D'UNE PÉRIODE DONNÉE POUR UN PRODUIT (TOUTES LES VERSIONS)
// ===============================================
var dateDebut = new DateTime(2024, 3, 1);
var dateFin = new DateTime(2024, 4, 30);

var problemesPeriodeProduit = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.DateCreation >= dateDebut 
             && t.DateCreation <= dateFin
             && t.Product.ProductName == "Planificateur d'Entraînement")
    .ToListAsync();

// ===============================================
// 5. OBTENIR TOUS LES PROBLÈMES RENCONTRÉS AU COURS D'UNE PÉRIODE DONNÉE POUR UN PRODUIT (UNE SEULE VERSION)
// ===============================================
var problemesPeriodeProduitVersion = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.DateCreation >= dateDebut 
             && t.DateCreation <= dateFin
             && t.Product.ProductName == "Planificateur d'Entraînement"
             && t.Version.VersionName == "2.0")
    .ToListAsync();

// ===============================================
// 6. OBTENIR TOUS LES PROBLÈMES EN COURS CONTENANT UNE LISTE DE MOTS-CLÉS (TOUS LES PRODUITS)
// ===============================================
var motsCles = new List<string> { "mémoire", "crash", "GPS" };

var problemesMotsClesEnCours = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.Statut.State == "En cours" 
             && motsCles.Any(mot => t.Description.Contains(mot) || (t.Resolution != null && t.Resolution.Contains(mot))))
    .ToListAsync();

// ===============================================
// 7. OBTENIR TOUS LES PROBLÈMES EN COURS POUR UN PRODUIT CONTENANT UNE LISTE DE MOTS-CLÉS (TOUTES LES VERSIONS)
// ===============================================
var problemesMotsClesProduitEnCours = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.Statut.State == "En cours"
             && t.Product.ProductName == "Planificateur d'Entraînement"
             && motsCles.Any(mot => t.Description.Contains(mot) || (t.Resolution != null && t.Resolution.Contains(mot))))
    .ToListAsync();

// ===============================================
// 8. OBTENIR TOUS LES PROBLÈMES EN COURS POUR UN PRODUIT CONTENANT UNE LISTE DE MOTS-CLÉS (UNE SEULE VERSION)
// ===============================================
var problemesMotsClesProduitVersionEnCours = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.Statut.State == "En cours"
             && t.Product.ProductName == "Planificateur d'Entraînement"
             && t.Version.VersionName == "2.0"
             && motsCles.Any(mot => t.Description.Contains(mot) || (t.Resolution != null && t.Resolution.Contains(mot))))
    .ToListAsync();

// ===============================================
// 9. OBTENIR TOUS LES PROBLÈMES RENCONTRÉS AU COURS D'UNE PÉRIODE DONNÉE POUR UN PRODUIT CONTENANT UNE LISTE DE MOTS-CLÉS (TOUTES LES VERSIONS)
// ===============================================
var problemesMotsClesPeriodeProduit = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.DateCreation >= dateDebut 
             && t.DateCreation <= dateFin
             && t.Product.ProductName == "Planificateur d'Entraînement"
             && motsCles.Any(mot => t.Description.Contains(mot) || (t.Resolution != null && t.Resolution.Contains(mot))))
    .ToListAsync();

// ===============================================
// 10. OBTENIR TOUS LES PROBLÈMES RENCONTRÉS AU COURS D'UNE PÉRIODE DONNÉE POUR UN PRODUIT CONTENANT UNE LISTE DE MOTS-CLÉS (UNE SEULE VERSION)
// ===============================================
var problemesMotsClesPeriodeProduitVersion = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.DateCreation >= dateDebut 
             && t.DateCreation <= dateFin
             && t.Product.ProductName == "Planificateur d'Entraînement"
             && t.Version.VersionName == "2.0"
             && motsCles.Any(mot => t.Description.Contains(mot) || (t.Resolution != null && t.Resolution.Contains(mot))))
    .ToListAsync();

// ===============================================
// 11. OBTENIR TOUS LES PROBLÈMES RÉSOLUS (TOUS LES PRODUITS)
// ===============================================
var problemesResolus = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.Statut.State == "Résolu")
    .ToListAsync();

// ===============================================
// 12. OBTENIR TOUS LES PROBLÈMES RÉSOLUS POUR UN PRODUIT (TOUTES LES VERSIONS)
// ===============================================
var problemesResolusProduit = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.Statut.State == "Résolu" && t.Product.ProductName == "Trader en Herbe")
    .ToListAsync();

// ===============================================
// 13. OBTENIR TOUS LES PROBLÈMES RÉSOLUS POUR UN PRODUIT (UNE SEULE VERSION)
// ===============================================
var problemesResolusProduitVersion = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.Statut.State == "Résolu" 
             && t.Product.ProductName == "Trader en Herbe"
             && t.Version.VersionName == "1.2")
    .ToListAsync();

// ===============================================
// 14. OBTENIR TOUS LES PROBLÈMES RÉSOLUS AU COURS D'UNE PÉRIODE DONNÉE POUR UN PRODUIT (TOUTES LES VERSIONS)
// ===============================================
var problemesResolusPeriodeProduit = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.Statut.State == "Résolu"
             && t.DateResolution >= dateDebut 
             && t.DateResolution <= dateFin
             && t.Product.ProductName == "Maître des Investissements")
    .ToListAsync();

// ===============================================
// 15. OBTENIR TOUS LES PROBLÈMES RÉSOLUS AU COURS D'UNE PÉRIODE DONNÉE POUR UN PRODUIT (UNE SEULE VERSION)
// ===============================================
var problemesResolusPeriodeProduitVersion = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.Statut.State == "Résolu"
             && t.DateResolution >= dateDebut 
             && t.DateResolution <= dateFin
             && t.Product.ProductName == "Maître des Investissements"
             && t.Version.VersionName == "2.0")
    .ToListAsync();

// ===============================================
// 16. OBTENIR TOUS LES PROBLÈMES RÉSOLUS CONTENANT UNE LISTE DE MOTS-CLÉS (TOUS LES PRODUITS)
// ===============================================
var problemesResolusMotsCles = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.Statut.State == "Résolu"
             && motsCles.Any(mot => t.Description.Contains(mot) || (t.Resolution != null && t.Resolution.Contains(mot))))
    .ToListAsync();

// ===============================================
// 17. OBTENIR TOUS LES PROBLÈMES RÉSOLUS POUR UN PRODUIT CONTENANT UNE LISTE DE MOTS-CLÉS (TOUTES LES VERSIONS)
// ===============================================
var problemesResolusMotsClesProduit = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.Statut.State == "Résolu"
             && t.Product.ProductName == "Planificateur d'Anxiété Sociale"
             && motsCles.Any(mot => t.Description.Contains(mot) || (t.Resolution != null && t.Resolution.Contains(mot))))
    .ToListAsync();

// ===============================================
// 18. OBTENIR TOUS LES PROBLÈMES RÉSOLUS POUR UN PRODUIT CONTENANT UNE LISTE DE MOTS-CLÉS (UNE SEULE VERSION)
// ===============================================
var problemesResolusMotsClesProduitVersion = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.Statut.State == "Résolu"
             && t.Product.ProductName == "Planificateur d'Anxiété Sociale"
             && t.Version.VersionName == "1.0"
             && motsCles.Any(mot => t.Description.Contains(mot) || (t.Resolution != null && t.Resolution.Contains(mot))))
    .ToListAsync();

// ===============================================
// 19. OBTENIR TOUS LES PROBLÈMES RÉSOLUS AU COURS D'UNE PÉRIODE DONNÉE POUR UN PRODUIT CONTENANT UNE LISTE DE MOTS-CLÉS (TOUTES LES VERSIONS)
// ===============================================
var problemesResolusMotsClesPeriodeProduit = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.Statut.State == "Résolu"
             && t.DateResolution >= dateDebut 
             && t.DateResolution <= dateFin
             && t.Product.ProductName == "Trader en Herbe"
             && motsCles.Any(mot => t.Description.Contains(mot) || (t.Resolution != null && t.Resolution.Contains(mot))))
    .ToListAsync();

// ===============================================
// 20. OBTENIR TOUS LES PROBLÈMES RÉSOLUS AU COURS D'UNE PÉRIODE DONNÉE POUR UN PRODUIT CONTENANT UNE LISTE DE MOTS-CLÉS (UNE SEULE VERSION)
// ===============================================
var problemesResolusMotsClesPeriodeProduitVersion = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.Statut.State == "Résolu"
             && t.DateResolution >= dateDebut 
             && t.DateResolution <= dateFin
             && t.Product.ProductName == "Trader en Herbe"
             && t.Version.VersionName == "1.2"
             && motsCles.Any(mot => t.Description.Contains(mot) || (t.Resolution != null && t.Resolution.Contains(mot))))
    .ToListAsync();

// ===============================================
// REQUÊTES BONUS - STATISTIQUES ET ANALYSES
// ===============================================

// Obtenir le nombre de tickets par produit
var statistiquesParProduit = await context.Tickets
    .GroupBy(t => t.Product.ProductName)
    .Select(g => new { 
        Produit = g.Key, 
        NombreTickets = g.Count(),
        TicketsEnCours = g.Count(t => t.Statut.State == "En cours"),
        TicketsResolus = g.Count(t => t.Statut.State == "Résolu")
    })
    .ToListAsync();

// Obtenir le nombre de tickets par OS
var statistiquesParOS = await context.Tickets
    .GroupBy(t => t.Os.OsName)
    .Select(g => new { 
        OS = g.Key, 
        NombreTickets = g.Count(),
        TicketsEnCours = g.Count(t => t.Statut.State == "En cours"),
        TicketsResolus = g.Count(t => t.Statut.State == "Résolu")
    })
    .ToListAsync();

// Obtenir les tickets les plus récents (derniers 30 jours)
var ticketsRecents = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.DateCreation >= DateTime.Now.AddDays(-30))
    .OrderByDescending(t => t.DateCreation)
    .ToListAsync();

// Obtenir les tickets résolus le plus rapidement
var ticketsResolutionRapide = await context.Tickets
    .Include(t => t.Product)
    .Include(t => t.Version)
    .Include(t => t.Os)
    .Include(t => t.Statut)
    .Where(t => t.DateResolution.HasValue)
    .OrderBy(t => EF.Functions.DateDiffDay(t.DateCreation, t.DateResolution.Value))
    .Take(10)
    .ToListAsync();

// Obtenir la compatibilité produit/version/OS
var matriceCompatibilite = await context.ProductVersionOsSupport
    .Include(pvos => pvos.Product)
    .Include(pvos => pvos.Version)
    .Include(pvos => pvos.Os)
    .Select(pvos => new {
        Produit = pvos.Product.ProductName,
        Version = pvos.Version.VersionName,
        OS = pvos.Os.OsName
    })
    .ToListAsync();

// ===============================================
// NOTES D'UTILISATION :
// ===============================================
// 1. Remplacez 'context' par votre instance de DbContext (ex: _nexaWorksContext)
// 2. Ajoutez 'using Microsoft.EntityFrameworkCore;' pour les méthodes comme Include(), ToListAsync()
// 3. Pour les contrôleurs, utilisez ces requêtes dans des méthodes async
// 4. Personnalisez les noms de produits et versions selon vos besoins
// 5. Adaptez les dates et mots-clés selon vos critères de recherche
// 6. N'oubliez pas de gérer les exceptions avec try/catch dans votre code final

// Exemple d'utilisation dans un contrôleur :
/*
[HttpGet]
public async Task<IActionResult> GetProblemsInProgress()
{
    try
    {
        var problemesEnCours = await _context.Tickets
            .Include(t => t.Product)
            .Include(t => t.Version)
            .Include(t => t.Os)
            .Include(t => t.Statut)
            .Where(t => t.Statut.State == "En cours")
            .ToListAsync();
            
        return Json(problemesEnCours);
    }
    catch (Exception ex)
    {
        return BadRequest($"Erreur: {ex.Message}");
    }
}
*/
